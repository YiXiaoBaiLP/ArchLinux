# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Import additional configuration files
#
# These configuration files will be loaded in order, replacing values in files
# loaded earlier with those loaded later in the chain. The file itself will
# always be loaded last.
import:
  #- /path/to/alacritty.yml
  - /home/yixiaobai/.config/alacritty/themes/dracula/dracula.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: xterm-256color

#window:
  # Window dimensions (changes require restart)
  #
  # Number of lines/columns (not pixels) in the terminal. The number of columns
  # must be at least `2`, while using a value of `0` for columns and lines will
  # fall back to the window manager's recommended size.
  #dimensions:
  #  columns: 0
  #  lines: 0

# 窗口启动大小
window:
  dimensions:
    columns: 110
    lines: 42
  # 窗口启动位置
  position:
    x: 400
    y: 150
  # 窗口边框
  padding:
    x: 2
    y: 2
  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  #padding:
  #  x: 0
  #  y: 0

  # Spread additional padding evenly around the terminal content.
  # 在终端内容周围平均分配其他填充
  dynamic_padding: true

  # Window decorations
  # 窗口边框
  # full(边框和标题栏) 或者 none（没有边框）
  decorations: full

  # Startup Mode (changes require restart)
  # 窗口启动模式
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   默认值
  #   - Maximized
  #   窗口最大化
  #   - Fullscreen
  #   屏幕最大化
  startup_mode: Windowed

  # Window title
  # 窗口标题
  title: Alacritty

  # Allow terminal applications to change Alacritty's window title.
  # 允许终端应用程序更改Alacritty的窗口标题
  dynamic_title: true

  # Window class (Linux/BSD only):
  # 窗口类型
  class:
    # Application instance name
    # 应用程序名称
    instance: Alacritty
    # General application class
    # 通用应用程序类
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  # GTK 主题配置 
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark`
  # and `light`. Set this to `None` to use the default theme variant.
  #  主题配置默认值：无
  gtk_theme_variant: None

# 滚动
scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  # 显示历史记录,0将禁用
  history: 100000

  # Scrolling distance multiplier.
  # 每次滚动的距离
  multiplier: 7

# Font configuration
# 字体配置
font:
  # Normal (roman) font face
  normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux/BSD) monospace
    #   - (Windows) Consolas
    family: hack

    # The `style` can be specified to pick a specific face.
    style: Regular

  # Bold font face
  bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    family: hack

    # The `style` can be specified to pick a specific face.
    style: Bold

  # Italic font face
  italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: hack

    # The `style` can be specified to pick a specific face.
    style: Italic

  # Bold italic font face
  bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    family: hack

    # The `style` can be specified to pick a specific face.
    style: Bold Italic

  # Point size
  # 字体大小
  size: 13

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter
  # spacing.
  # 偏移量是每个字符周围的多余空间。可以认为`offset.y`
  # 表示修改行距，而`offset.x`表示修改字母
  # 间距。
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upward.
  # 字形偏移量确定字形在其单元格中的位置
  # 默认值位于底部。 x的增加将字形移至
  # 正确，增加y可使字形向上移动。
  glyph_offset:
    x: 0
    y: 0

# If `true`, bold text is drawn using the bright color variants.
# 如果为’是’，则使用明亮颜色体绘粗体文本。
draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night)
# 颜色配置
#colors:
#  # Default colors
#  primary:
#    # 背景
#    background: '#1d1f21'
#    # 前景
#    foreground: '#c5c8c6'
#
#    # 明亮和暗淡的前景色
#    #
#    # 如果不是，则自动计算变暗的前景色
#    # 当下。如果未设置明亮的前景色，或者
#    # draw_bold_text_with_bright_colors是false，是正常的前景
#    # 将使用颜色。
#    dim_foreground: '#828482'
#    bright_foreground: '#eaeaea'
#
#  # 光标颜色
#  #
#  # 用来绘制终端光标的颜色。
#  #
#  # 允许的值为CellForeground和CellBackground，它们引用了
#  # 受影响的单元格或十六进制颜色（如＃ff00ff）。
#  cursor:
#    text: CellBackground
#    cursor: CellForeground
#
#  # Vi mode cursor colors
#  #  Vi模式光标颜色
#  
#  # vi模式处于活动状态时，光标的颜色。
#  #
#  # 允许的值为CellForeground和CellBackground，它们引用了
#  # 受影响的单元格或十六进制颜色（如＃ff00ff）。
#  vi_mode_cursor:
#    text: CellBackground
#    cursor: CellForeground
#
#  # 选择颜色
#  #
#  # 用来绘制选择区域的颜色。
#  # 允许的值为CellForeground和CellBackground，它们引用了
#  # 受影响的单元格或十六进制颜色（如＃ff00ff）。
#  selection:
#    text: CellBackground
#    background: CellForeground
#
#  # Search colors
#  # 搜索颜色
#  #
#  # Colors used for the search bar and match highlighting.
#  # 搜索栏和匹配突出显示所使用的颜色
#  search:
#    # Allowed values are CellForeground and CellBackground, which reference the
#    # 允许的值为CellForeground和CellBackground，它们引用了
#    # affected cell, or hexadecimal colors like #ff00ff.
#    # 受影响的单元格或十六进制颜色（如＃ff00ff）。
#    matches:
#      foreground: '#000000'
#      background: '#ffffff'
#    focused_match:
#      foreground: CellBackground
#      background: CellForeground
#    bar:
#      background: '#c5c8c6'
#      foreground: '#1d1f21'
#
#  # Normal colors
#  # 正常模式的颜色
#  normal:
#    black:   '#1d1f21'
#    red:     '#cc6666'
#    green:   '#b5bd68'
#    yellow:  '#f0c674'
#    blue:    '#81a2be'
#    magenta: '#b294bb'
#    cyan:    '#8abeb7'
#    white:   '#c5c8c6'
#
#  # Bright colors
#  # 亮色模式
#  bright:
#    black:   '#666666'
#    red:     '#d54e53'
#    green:   '#b9ca4a'
#    yellow:  '#e7c547'
#    blue:    '#7aa6da'
#    magenta: '#c397d8'
#    cyan:    '#70c0b1'
#    white:   '#eaeaea'
#
#  # Dim colors
#  #
#  # If the dim colors are not set, they will be calculated automatically based
#  # on the `normal` colors.
#  # 暗淡模式
#  dim:
#    black:   '#131415'
#    red:     '#864343'
#    green:   '#777c44'
#    yellow:  '#9e824c'
#    blue:    '#556a7d'
#    magenta: '#75617b'
#    cyan:    '#5b7d78'
#    white:   '#828482'
#
#  # Indexed Colors
#  #
#  # The indexed colors include all colors from 16 to 256.
#  # When these are not set, they're filled with sensible defaults.
#  #
#  # Example:
#  #   `- { index: 16, color: '#ff00ff' }`
#  #
#  # 索引颜色
#  # 默认的颜色配置
#  indexed_colors: []
#
# Bell
#
# The bell is rung every time the BEL control character is received.
bell:
  # Visual Bell Animation
  #
  # Animation effect for flashing the screen when the visual bell is rung.
  #
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: Linear

  # Duration of the visual bell flash in milliseconds. A `duration` of `0` will
  # disable the visual bell animation.
  duration: 0

  # Visual bell animation color.
  # 可视铃声动画颜色
  color: '#ffffff'

  # Bell Command
  #
  # This program is executed whenever the bell is rung.
  #
  # When set to `command: None`, no command will be executed.
  #
  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #
  command: None

#  背景透明度配置
bakground_opacity: 0.7

selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  #  此字符串包含用作分隔符的所有字符
  #  Alacritty中的“语义词”。
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  # 设置为“ true”时，所选文本将被复制到主剪贴板。
  save_to_clipboard: true

# 光标样式
cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  # Vi mode cursor style
  # vi 光标样式
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  #vi_mode_style: None

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  #unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  #thickness: 0.15

# Live config reload (changes require restart)
# 实时加载配置文件
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g.
# `/bin/fish`. Entries in `shell.args` are passed unmodified as arguments to the
# shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
# 启动目录
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
# 在按下alt时，在字符前发送ESC(\x1b)
alt_send_esc: true

# 鼠标设置
mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  #  “double_click”和“triple_click”设置控制时间
  # Alacritty应该等待接受多次点击为两次或单击三次
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  # 如果设为“true”，则在输入时临时隐藏光标
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a
    # URL. The URL is always added to the command as the last parameter.
    #
    # When set to `launcher: None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    launcher:
      program: chromium
      args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when
    # clicking on them. The available modifiers are documented in the key
    # binding section.
    modifiers: alt

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Open URLs at the cursor location with the launcher configured in
#       `url.launcher`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  - { key: Paste,                                action: Paste          }
  - { key: Copy,                                 action: Copy           }
  - { key: L,         mods: Control,             action: ClearLogNotice }
  - { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  - { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  - { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  - { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  - { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  #- { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  #- { key: Escape,                      mode: Vi, action: ClearSelection          }
  #- { key: I,                           mode: Vi, action: ScrollToBottom          }
  #- { key: I,                           mode: Vi, action: ToggleViMode            }
  #- { key: C,      mods: Control,       mode: Vi, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi, action: Copy                    }
  #- { key: Y,                           mode: Vi, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi, action: ClearSelection          }
  #- { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi, action: Open                    }
  #- { key: K,                           mode: Vi, action: Up                      }
  #- { key: J,                           mode: Vi, action: Down                    }
  #- { key: H,                           mode: Vi, action: Left                    }
  #- { key: L,                           mode: Vi, action: Right                   }
  #- { key: Up,                          mode: Vi, action: Up                      }
  #- { key: Down,                        mode: Vi, action: Down                    }
  #- { key: Left,                        mode: Vi, action: Left                    }
  #- { key: Right,                       mode: Vi, action: Right                   }
  #- { key: Key0,                        mode: Vi, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  #- { key: B,                           mode: Vi, action: SemanticLeft            }
  #- { key: W,                           mode: Vi, action: SemanticRight           }
  #- { key: E,                           mode: Vi, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  #- { key: Slash,                       mode: Vi, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  #- { key: N,                           mode: Vi, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

  # (Windows, Linux, and BSD only)
  # C+S+V : 粘贴
  - { key: V,              mods: Control|Shift,           action: Paste            }
  # C+S+C : 复制
  - { key: C,              mods: Control|Shift,           action: Copy             }
  # C+S+F ：查找
  - { key: F,              mods: Control|Shift,           action: SearchForward    }
  # C+S+B ：反向查找
  - { key: B,              mods: Control|Shift,           action: SearchBackward   }
  - { key: C,              mods: Control|Shift, mode: Vi, action: ClearSelection   }
  - { key: Insert,         mods: Shift,                   action: PasteSelection   }
  - { key: Key0,           mods: Control,                 action: ResetFontSize    }
  - { key: Equals,         mods: Control,                 action: IncreaseFontSize }
  - { key: Plus,           mods: Control,                 action: IncreaseFontSize }
  - { key: NumpadAdd,      mods: Control,                 action: IncreaseFontSize }
  - { key: Minus,          mods: Control,                 action: DecreaseFontSize }
  - { key: NumpadSubtract, mods: Control,                 action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,              mods: Command, mode: ~Vi, chars: "\x0c"            }
  #- { key: Key0,           mods: Command,            action: ResetFontSize    }
  #- { key: Equals,         mods: Command,            action: IncreaseFontSize }
  #- { key: Plus,           mods: Command,            action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Command,            action: IncreaseFontSize }
  #- { key: Minus,          mods: Command,            action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Command,            action: DecreaseFontSize }
  #- { key: K,              mods: Command,            action: ClearHistory     }
  #- { key: V,              mods: Command,            action: Paste            }
  #- { key: C,              mods: Command,            action: Copy             }
  #- { key: C,              mods: Command, mode: Vi,  action: ClearSelection   }
  #- { key: H,              mods: Command,            action: Hide             }
  #- { key: M,              mods: Command,            action: Minimize         }
  #- { key: Q,              mods: Command,            action: Quit             }
  #- { key: W,              mods: Command,            action: Quit             }
  #- { key: N,              mods: Command,            action: SpawnNewInstance }
  #- { key: F,              mods: Command|Control,    action: ToggleFullscreen }
  #- { key: F,              mods: Command,            action: SearchForward    }
  #- { key: B,              mods: Command,            action: SearchBackward   }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
